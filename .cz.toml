[tool.commitizen]
bump_message = "bump: version $current_version → $new_version"
major_version_zero = true
name = "cz_conventional_commits"
tag_format = "v$version"
update_changelog_on_bump = true
version_provider = "poetry"
version_scheme = "semver"

[tool.commitizen.customize]
bump_map = {"break" = "MAJOR", "new" = "MINOR", "fix" = "PATCH", "hotfix" = "PATCH", "feat" = "MINOR", "feature" = "MINOR", "perf" = "PATCH", "refactor" = "PATCH"}
bump_pattern = "^(break|new|fix|hotfix|feat|feature|perf|refactor)"
change_type_order = ["BREAKING CHANGE", "feat", "fix", "refactor", "perf"]
example = "feature: add new workflow execution engine"
message_template = "{{change_type}}{{scope}}: {{message}}"
schema = """
<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>
"""
schema_pattern = "^(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert)(\\(.+\\))?: .{1,50}"

[[tool.commitizen.customize.questions]]
choices = [
  {value = "feat", name = "feat: ✨ A new feature"},
  {value = "fix", name = "fix: 🐛 A bug fix"},
  {value = "docs", name = "docs: 📚 Documentation only changes"},
  {value = "style", name = "style: 💎 Changes that do not affect the meaning of the code"},
  {value = "refactor", name = "refactor: 📦 A code change that neither fixes a bug nor adds a feature"},
  {value = "perf", name = "perf: 🚀 A code change that improves performance"},
  {value = "test", name = "test: 🚨 Adding missing tests or correcting existing tests"},
  {value = "build", name = "build: 🛠  Changes that affect the build system or external dependencies"},
  {value = "ci", name = "ci: ⚙️  Changes to our CI configuration files and scripts"},
  {value = "chore", name = "chore: ♻️  Other changes that don't modify src or test files"},
  {value = "revert", name = "revert: 🗑  Reverts a previous commit"}
]
message = "Select the type of change that you're committing"
name = "change_type"
type = "list"

[[tool.commitizen.customize.questions]]
message = "What is the scope of this change? (class or file name): (press [enter] to skip)"
name = "scope"
type = "input"

[[tool.commitizen.customize.questions]]
message = "Write a short, imperative tense description of the change:\n"
name = "message"
type = "input"

[[tool.commitizen.customize.questions]]
message = "Provide a longer description of the change: (press [enter] to skip)\n"
name = "body"
type = "input"

[[tool.commitizen.customize.questions]]
default = false
message = "Is this a BREAKING CHANGE? (if yes, please describe below)"
name = "is_breaking_change"
type = "confirm"

[[tool.commitizen.customize.questions]]
message = "Describe the breaking change:\n"
name = "breaking"
type = "input"
when = "{{ answers.is_breaking_change }}"
